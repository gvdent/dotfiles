alias gs='git status'
alias gap='git add --patch'
alias gc='git commit'
alias gt='git log --oneline --graph --all --decorate --abbrev-commit'
alias gtb="git log --pretty='%h %<(5,trunc)%an %s' --graph --all --decorate --abbrev-commit"
alias gp='git pull && git push'
alias ds='date +%y%m%d'
alias dc='docker-compose'
alias fixWebcam='sudo killall VDCAssistant'
alias cleanDockerContainers='docker rm $(docker ps -a -q --no-trunc)'
alias cleanDockerImages='docker rmi $(docker images -q --no-trunc)'
alias cleanGitBranches='git branch --merged | grep -v "master\|develop" | xargs git branch -d'
alias packageThisShip='D=$(pwd) && pushd /tmp/ && cp -r ${D} ./ && T=${D##*/} && rm -rf ${T}/.git && tar -czf ${T}.tgz ./${T} && rm -rf ./${T} && popd && mv /tmp/${T}.tgz ./'
alias prim='screen -Dr primary || screen -S primary'
alias sec='screen -Dr secundary || screen -S secundary'
alias drawonscreen='echo "Its name is gromit" && gromit-mpx --key "F9"'
alias rw='railway'
alias clint='coffeelint -f ~/weaver/coffeescript-style-guide/coffeelint.json'

function grev() {
  git diff ${1}
  read -p "Revert? " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy] ]];
  then
    git checkout ${1}
  fi
}

function yekpost() {
  file="_posts/$(date +%Y-%m-%d)-${1// /_}.md"
  if [ -z "${1}" ];
  then
    echo "Please provide a title"
    return 1
  else
    echo "---
layout: post
title: ${1}
---" > "$file"
    vi "$file"
  fi;
}

function yekupdate() {
  pushd ~/personal/gvdent.github.io
  file="_microblog/$(date +%Y-%m-%d)-$RANDOM.md"
  echo "---
layout: microblog-post
date: $(date +%Y-%m-%d\ %T\ %z)
---
" > "$file"
  hash=$(md5sum "$file")
  vi +4 "$file"
  newhash=$(md5sum "$file")
  if [[ "$hash" == "$newhash" ]];
  then
    echo "Not modified, removing"
    rm "$file"
  else
    echo "Modified, committing"
    git add "$file"
    git commit -m "Added $file"
    git push
  fi;
  popd
}

function vif() { vi $(find ./ | grep "$@" | head -n1 ) ; }
function lookup() {
  echo "Looking for ${1} with mask: ${2}"
  if [ -z ${2+x} ]; then pattern=''; else pattern=" -name '$2'"; fi

  find . -type f $pattern -print0 | xargs -0 grep -is "$1" --
}

function dockertransfer() {
  setNameAndVersion

  docker save sysunite/${name}:${version} | gzip -c | pv | ssh ${1} docker load
}

function getGitStatusFile() {
  gs | grep "$1" | awk '{ print $NF }'
}

function gco() { git checkout -- $(getGitStatusFile $1) }
function ga() { git add $(getGitStatusFile $1) }
function grh() { git reset HEAD $(getGitStatusFile $1) }

function gittag() {
  setNameAndVersion
  echo "Tagging ${version} for ${name}"
  git tag ${version}
}

function dockerpush() {
  setNameAndVersion

  docker push sysunite/${name}:${version}
  gittag
}

function gsalocal() {
  git stash apply "$(git stash list | awk -F ':' '$3~/local/ { print $1 }')"
}

function setNameAndVersion() {
  if [ -f "package.json" ]; then
    name=$(grep name package.json | sed -e 's/.*"\(.*\)",/\1/' | head -n 1)
    version=$(grep version package.json | sed -e 's/.*"\(.*\)",/\1/' | head -n 1)
  elif [ -f "pom.xml" ]; then
    name=$(grep artifactId pom.xml | sed -e s'/.*>\([^<]*\)<.*/\1/' | head -n 1)
    version=$(grep '<version' pom.xml | sed -e 's/.*>\([^<]*\)<.*/\1/' | head -n 1)
  elif [ -f "build.sbt" ]; then
    name=$(grep 'name :=' build.sbt | sed -e 's/name := "\([^"]*\)".*/\1/')
    version=$(grep 'version :=' build.sbt | sed -e 's/version := "\([^"]*\)".*/\1/')
  else
    name=$(basename $(pwd))
    version=$(git describe --tags | sed -e 's/^v//')
  fi;
}

function dockerize() {
  setNameAndVersion

  docker build -t sysunite/${name}:${version} .
}

function dockerstore() {
  docker save ${1}/${2}:${3} | gzip -c > ${2}-${3}.tgz
}

function loadhawaiidb() {
  docker-compose -f ~/weaver/server/docker-compose.yml restart postgresql-connector
  psql postgres -c "drop database \"$2\"" || true
  psql postgres -c "create database \"$2\""
  ssh hawaii pg_dump $1 | psql $2
  docker-compose -f ~/weaver/server/docker-compose.yml restart weaver-server
}

case "$TERM" in
    screen*) PROMPT_COMMAND='echo -ne "\033k\033\0134"'
esac

alias lscreen='xrandr | awk "/eDP/ {print \$1}"'
alias e1screen='xrandr | awk "/DP.-8 connected/ {print \$1}"'
alias e2screen='xrandr | awk "/DP.-1.8/ {print \$1}"'
alias athome="xrandr --auto --output $(lscreen) --right-of HDMI2"
alias atnone="xrandr --output HDMI2 --off --output DP3-1-8 --off --output DP3-8 --off --output $(lscreen) --mode 1600x1200 --mode 1920x1080 --fb 1920x1600"
alias lsoff="xrandr --output $(lscreen) --off"
alias lson="xrandr --output $(lscreen) --auto"
alias atnone2="xrandr --output $(lscreen) --mode 1600x1200 --mode 1920x1080 --fb 1920x1600"
alias atpres="xrandr --output HDMI2 --auto --output $(lscreen) --off "

alias battery="upower -i /org/freedesktop/UPower/devices/battery_BAT0 | egrep 'percentage|(time to empty)'"

alias atcroon="xrandr --output $(lscreen) --off --output $(e2screen) --mode 2560x1440 --pos 0x0 --rotate normal --output HDMI2 --mode 2560x1440 --pos 2560x0 --rotate right --output $(e1screen) --mode 2560x1440 --pos 4000x0 --rotate normal"
